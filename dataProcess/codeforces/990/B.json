{
    "name": "Micro-World",
    "index": "B",
    "description": "You have a Petri dish with bacteria and you are preparing to dive into the harsh micro-world. But, unfortunately, you don't have any microscope nearby, so you can't watch them.\n\nYou know that you have $n$ bacteria in the Petri dish and size of the $i$-th bacteria is $a_i$. Also you know intergalactic positive integer constant $K$.\n\nThe $i$-th bacteria can swallow the $j$-th bacteria if and only if $a_i &gt; a_j$ and $a_i \\le a_j + K$. The $j$-th bacteria disappear, but the $i$-th bacteria doesn't change its size. The bacteria can perform multiple swallows. On each swallow operation any bacteria $i$ can swallow any bacteria $j$ if $a_i &gt; a_j$ and $a_i \\le a_j + K$. The swallow operations go one after another.\n\nFor example, the sequence of bacteria sizes $a=[101, 53, 42, 102, 101, 55, 54]$ and $K=1$. The one of possible sequences of swallows is: $[101, 53, 42, 102, \\underline{101}, 55, 54]$ $\\to$ $[101, \\underline{53}, 42, 102, 55, 54]$ $\\to$ $[\\underline{101}, 42, 102, 55, 54]$ $\\to$ $[42, 102, 55, \\underline{54}]$ $\\to$ $[42, 102, 55]$. In total there are $3$ bacteria remained in the Petri dish.\n\nSince you don't have a microscope, you can only guess, what the minimal possible number of bacteria can remain in your Petri dish when you finally will find any microscope.",
    "full_description": "You have a Petri dish with bacteria and you are preparing to dive into the harsh micro-world. But, unfortunately, you don't have any microscope nearby, so you can't watch them.\n\nYou know that you have $n$ bacteria in the Petri dish and size of the $i$-th bacteria is $a_i$. Also you know intergalactic positive integer constant $K$.\n\nThe $i$-th bacteria can swallow the $j$-th bacteria if and only if $a_i &gt; a_j$ and $a_i \\le a_j + K$. The $j$-th bacteria disappear, but the $i$-th bacteria doesn't change its size. The bacteria can perform multiple swallows. On each swallow operation any bacteria $i$ can swallow any bacteria $j$ if $a_i &gt; a_j$ and $a_i \\le a_j + K$. The swallow operations go one after another.\n\nFor example, the sequence of bacteria sizes $a=[101, 53, 42, 102, 101, 55, 54]$ and $K=1$. The one of possible sequences of swallows is: $[101, 53, 42, 102, \\underline{101}, 55, 54]$ $\\to$ $[101, \\underline{53}, 42, 102, 55, 54]$ $\\to$ $[\\underline{101}, 42, 102, 55, 54]$ $\\to$ $[42, 102, 55, \\underline{54}]$ $\\to$ $[42, 102, 55]$. In total there are $3$ bacteria remained in the Petri dish.\n\nSince you don't have a microscope, you can only guess, what the minimal possible number of bacteria can remain in your Petri dish when you finally will find any microscope.\nThe first line contains two space separated positive integers $n$ and $K$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le K \\le 10^6$) — number of bacteria and intergalactic constant $K$.\n\nThe second line contains $n$ space separated integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$) — sizes of bacteria you have.\nPrint the only integer — minimal possible number of bacteria can remain.",
    "train_in_outs": {
        "inputs": [
            "7 1\n101 53 42 102 101 55 54\n",
            "6 5\n20 15 10 15 20 25\n",
            "7 1000000\n1 1 1 1 1 1 1\n"
        ],
        "outputs": [
            "3\n",
            "1\n",
            "7\n"
        ]
    },
    "test_in_outs": {
        "inputs": [
            "7 1\n101 53 42 102 101 55 54",
            "6 5\n20 15 10 15 20 25",
            "7 1000000\n1 1 1 1 1 1 1",
            "1 1\n1",
            "1 4\n8",
            "10 1\n1 2 3 5 6 8 10 11 9 4",
            "9 2\n1 6 1 5 5 8 6 8 7",
            "15 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
            "2 1000000\n1 1000000",
            "7 2\n1 5 5 8 9 8 8",
            "10 1\n2 6 3 4 2 4 4 3 2 1",
            "4 1\n2 2 1 1",
            "10 1\n6 3 1 3 6 4 1 3 6 4",
            "2 1\n1 1",
            "2 1\n1 2",
            "8 2\n3 13 9 8 3 13 9 14",
            "8 1000000\n1 1 5 1000000 1000000 2 2 2",
            "2 1\n999152 999153"
        ],
        "outputs": [
            "3",
            "1",
            "7",
            "1",
            "1",
            "2",
            "4",
            "15",
            "1",
            "4",
            "4",
            "2",
            "7",
            "2",
            "1",
            "5",
            "2",
            "1"
        ]
    },
    "code": "from bisect import bisect_right\r\nn,k=map(int,input().split());a=sorted(list(map(int,input().split())));ans=0\r\nfor i in range(n):\r\n    p=bisect_right(a,a[i]+k)\r\n    if p<=n-1:\r\n        if a[p-1]>a[i] and a[p-1]-a[i]<=k or a[p]>a[i] and a[p]-a[i]<=k:ans+=1\r\n    elif p==n:\r\n        if a[p - 1] > a[i] and a[p - 1] - a[i] <= k:ans+=1\r\nprint(n-ans)",
    "rating": "1200"
}
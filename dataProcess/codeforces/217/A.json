{
    "name": "Ice Skating",
    "index": "A",
    "description": "Bajtek is learning to skate on ice. He's a beginner, so his only mode of transportation is pushing off from a snow drift to the north, east, south or west and sliding until he lands in another snow drift. He has noticed that in this way it's impossible to get from some snow drifts to some other by any sequence of moves. He now wants to heap up some additional snow drifts, so that he can get from any snow drift to any other one. He asked you to find the minimal number of snow drifts that need to be created.\n\nWe assume that Bajtek can only heap up snow drifts at integer coordinates.",
    "full_description": "Bajtek is learning to skate on ice. He's a beginner, so his only mode of transportation is pushing off from a snow drift to the north, east, south or west and sliding until he lands in another snow drift. He has noticed that in this way it's impossible to get from some snow drifts to some other by any sequence of moves. He now wants to heap up some additional snow drifts, so that he can get from any snow drift to any other one. He asked you to find the minimal number of snow drifts that need to be created.\n\nWe assume that Bajtek can only heap up snow drifts at integer coordinates.\nThe first line of input contains a single integer *n* (1<=≤<=*n*<=≤<=100) — the number of snow drifts. Each of the following *n* lines contains two integers *x**i* and *y**i* (1<=≤<=*x**i*,<=*y**i*<=≤<=1000) — the coordinates of the *i*-th snow drift.\n\nNote that the north direction coinсides with the direction of *Oy* axis, so the east direction coinсides with the direction of the *Ox* axis. All snow drift's locations are distinct.\nOutput the minimal number of snow drifts that need to be created in order for Bajtek to be able to reach any snow drift from any other one.",
    "train_in_outs": {
        "inputs": [
            "2\n2 1\n1 2\n",
            "2\n2 1\n4 1\n"
        ],
        "outputs": [
            "1\n",
            "0\n"
        ]
    },
    "test_in_outs": {
        "inputs": [
            "2\n2 1\n1 2",
            "2\n2 1\n4 1",
            "24\n171 35\n261 20\n4 206\n501 446\n961 912\n581 748\n946 978\n463 514\n841 889\n341 466\n842 967\n54 102\n235 261\n925 889\n682 672\n623 636\n268 94\n635 710\n474 510\n697 794\n586 663\n182 184\n806 663\n468 459",
            "17\n660 646\n440 442\n689 618\n441 415\n922 865\n950 972\n312 366\n203 229\n873 860\n219 199\n344 308\n169 176\n961 992\n153 84\n201 230\n987 938\n834 815",
            "11\n798 845\n722 911\n374 270\n629 537\n748 856\n831 885\n486 641\n751 829\n609 492\n98 27\n654 663",
            "1\n321 88",
            "9\n811 859\n656 676\n76 141\n945 951\n497 455\n18 55\n335 294\n267 275\n656 689",
            "7\n948 946\n130 130\n761 758\n941 938\n971 971\n387 385\n509 510",
            "6\n535 699\n217 337\n508 780\n180 292\n393 112\n732 888",
            "14\n25 23\n499 406\n193 266\n823 751\n219 227\n101 138\n978 992\n43 74\n997 932\n237 189\n634 538\n774 740\n842 767\n742 802",
            "12\n548 506\n151 198\n370 380\n655 694\n654 690\n407 370\n518 497\n819 827\n765 751\n802 771\n741 752\n653 662",
            "40\n685 711\n433 403\n703 710\n491 485\n616 619\n288 282\n884 871\n367 352\n500 511\n977 982\n51 31\n576 564\n508 519\n755 762\n22 20\n368 353\n232 225\n953 955\n452 436\n311 330\n967 988\n369 364\n791 803\n150 149\n651 661\n118 93\n398 387\n748 766\n852 852\n230 228\n555 545\n515 519\n667 678\n867 862\n134 146\n859 863\n96 99\n486 469\n303 296\n780 786",
            "3\n175 201\n907 909\n388 360",
            "7\n312 298\n86 78\n73 97\n619 594\n403 451\n538 528\n71 86",
            "19\n802 820\n368 248\n758 794\n455 378\n876 888\n771 814\n245 177\n586 555\n844 842\n364 360\n820 856\n731 624\n982 975\n825 856\n122 121\n862 896\n42 4\n792 841\n828 820",
            "32\n643 877\n842 614\n387 176\n99 338\n894 798\n652 728\n611 648\n622 694\n579 781\n243 46\n322 305\n198 438\n708 579\n246 325\n536 459\n874 593\n120 277\n989 907\n223 110\n35 130\n761 692\n690 661\n518 766\n226 93\n678 597\n725 617\n661 574\n775 496\n56 416\n14 189\n358 359\n898 901",
            "32\n325 327\n20 22\n72 74\n935 933\n664 663\n726 729\n785 784\n170 171\n315 314\n577 580\n984 987\n313 317\n434 435\n962 961\n55 54\n46 44\n743 742\n434 433\n617 612\n332 332\n883 886\n940 936\n793 792\n645 644\n611 607\n418 418\n465 465\n219 218\n167 164\n56 54\n403 405\n210 210",
            "32\n652 712\n260 241\n27 154\n188 16\n521 351\n518 356\n452 540\n790 827\n339 396\n336 551\n897 930\n828 627\n27 168\n180 113\n134 67\n794 671\n812 711\n100 241\n686 813\n138 289\n384 506\n884 932\n913 959\n470 508\n730 734\n373 478\n788 862\n392 426\n148 68\n113 49\n713 852\n924 894",
            "14\n685 808\n542 677\n712 747\n832 852\n187 410\n399 338\n626 556\n530 635\n267 145\n215 209\n559 684\n944 949\n753 596\n601 823",
            "5\n175 158\n16 2\n397 381\n668 686\n957 945",
            "5\n312 284\n490 509\n730 747\n504 497\n782 793",
            "2\n802 903\n476 348",
            "4\n325 343\n425 442\n785 798\n275 270",
            "28\n462 483\n411 401\n118 94\n111 127\n5 6\n70 52\n893 910\n73 63\n818 818\n182 201\n642 633\n900 886\n893 886\n684 700\n157 173\n953 953\n671 660\n224 225\n832 801\n152 157\n601 585\n115 101\n739 722\n611 606\n659 642\n461 469\n702 689\n649 653",
            "36\n952 981\n885 900\n803 790\n107 129\n670 654\n143 132\n66 58\n813 819\n849 837\n165 198\n247 228\n15 39\n619 618\n105 138\n868 855\n965 957\n293 298\n613 599\n227 212\n745 754\n723 704\n877 858\n503 487\n678 697\n592 595\n155 135\n962 982\n93 89\n660 673\n225 212\n967 987\n690 680\n804 813\n489 518\n240 221\n111 124",
            "30\n89 3\n167 156\n784 849\n943 937\n144 95\n24 159\n80 120\n657 683\n585 596\n43 147\n909 964\n131 84\n345 389\n333 321\n91 126\n274 325\n859 723\n866 922\n622 595\n690 752\n902 944\n127 170\n426 383\n905 925\n172 284\n793 810\n414 510\n890 884\n123 24\n267 255",
            "5\n664 666\n951 941\n739 742\n844 842\n2 2",
            "3\n939 867\n411 427\n757 708",
            "36\n429 424\n885 972\n442 386\n512 511\n751 759\n4 115\n461 497\n496 408\n8 23\n542 562\n296 331\n448 492\n412 395\n109 166\n622 640\n379 355\n251 262\n564 586\n66 115\n275 291\n666 611\n629 534\n510 567\n635 666\n738 803\n420 369\n92 17\n101 144\n141 92\n258 258\n184 235\n492 456\n311 210\n394 357\n531 512\n634 636",
            "29\n462 519\n871 825\n127 335\n156 93\n576 612\n885 830\n634 779\n340 105\n744 795\n716 474\n93 139\n563 805\n137 276\n177 101\n333 14\n391 437\n873 588\n817 518\n460 597\n572 670\n140 303\n392 441\n273 120\n862 578\n670 639\n410 161\n544 577\n193 116\n252 195",
            "23\n952 907\n345 356\n812 807\n344 328\n242 268\n254 280\n1000 990\n80 78\n424 396\n595 608\n755 813\n383 380\n55 56\n598 633\n203 211\n508 476\n600 593\n206 192\n855 882\n517 462\n967 994\n642 657\n493 488",
            "10\n579 816\n806 590\n830 787\n120 278\n677 800\n16 67\n188 251\n559 560\n87 67\n104 235",
            "23\n420 424\n280 303\n515 511\n956 948\n799 803\n441 455\n362 369\n299 289\n823 813\n982 967\n876 878\n185 157\n529 551\n964 989\n655 656\n1 21\n114 112\n45 56\n935 937\n1000 997\n934 942\n360 366\n648 621",
            "23\n102 84\n562 608\n200 127\n952 999\n465 496\n322 367\n728 690\n143 147\n855 867\n861 866\n26 59\n300 273\n255 351\n192 246\n70 111\n365 277\n32 104\n298 319\n330 354\n241 141\n56 125\n315 298\n412 461",
            "7\n429 506\n346 307\n99 171\n853 916\n322 263\n115 157\n906 924",
            "3\n1 1\n2 1\n2 2",
            "4\n1 1\n1 2\n2 1\n2 2",
            "5\n1 1\n1 2\n2 2\n3 1\n3 3",
            "6\n1 1\n1 2\n2 2\n3 1\n3 2\n3 3",
            "20\n1 1\n2 2\n3 3\n3 9\n4 4\n5 2\n5 5\n5 7\n5 8\n6 2\n6 6\n6 9\n7 7\n8 8\n9 4\n9 7\n9 9\n10 2\n10 9\n10 10",
            "21\n1 1\n1 9\n2 1\n2 2\n2 5\n2 6\n2 9\n3 3\n3 8\n4 1\n4 4\n5 5\n5 8\n6 6\n7 7\n8 8\n9 9\n10 4\n10 10\n11 5\n11 11",
            "22\n1 1\n1 3\n1 4\n1 8\n1 9\n1 11\n2 2\n3 3\n4 4\n4 5\n5 5\n6 6\n6 8\n7 7\n8 3\n8 4\n8 8\n9 9\n10 10\n11 4\n11 9\n11 11",
            "50\n1 1\n2 2\n2 9\n3 3\n4 4\n4 9\n4 16\n4 24\n5 5\n6 6\n7 7\n8 8\n8 9\n8 20\n9 9\n10 10\n11 11\n12 12\n13 13\n14 7\n14 14\n14 16\n14 25\n15 4\n15 6\n15 15\n15 22\n16 6\n16 16\n17 17\n18 18\n19 6\n19 19\n20 20\n21 21\n22 6\n22 22\n23 23\n24 6\n24 7\n24 8\n24 9\n24 24\n25 1\n25 3\n25 5\n25 7\n25 23\n25 24\n25 25",
            "55\n1 1\n1 14\n2 2\n2 19\n3 1\n3 3\n3 8\n3 14\n3 23\n4 1\n4 4\n5 5\n5 8\n5 15\n6 2\n6 3\n6 4\n6 6\n7 7\n8 8\n8 21\n9 9\n10 1\n10 10\n11 9\n11 11\n12 12\n13 13\n14 14\n15 15\n15 24\n16 5\n16 16\n17 5\n17 10\n17 17\n17 18\n17 22\n17 27\n18 18\n19 19\n20 20\n21 20\n21 21\n22 22\n23 23\n24 14\n24 24\n25 25\n26 8\n26 11\n26 26\n27 3\n27 27\n28 28",
            "3\n1 2\n2 1\n2 2",
            "6\n4 4\n3 4\n5 4\n4 5\n4 3\n3 1",
            "4\n1 1\n1 2\n2 1\n2 2",
            "3\n1 1\n2 2\n1 2",
            "8\n1 3\n1 1\n4 1\n2 2\n2 5\n5 9\n5 1\n5 4",
            "10\n1 1\n1 2\n1 3\n1 4\n5 5\n6 6\n7 7\n8 8\n9 9\n100 100",
            "7\n1 1\n2 2\n3 3\n4 4\n1 2\n2 3\n3 4",
            "6\n1 1\n2 1\n2 2\n2 4\n4 3\n2 3",
            "4\n3 1\n2 1\n2 2\n1 2",
            "6\n1 1\n2 2\n2 1\n2 4\n4 3\n2 3",
            "3\n1 2\n1 3\n1 4",
            "4\n1 1\n2 2\n1 2\n2 1",
            "4\n1 3\n2 1\n3 2\n3 1",
            "7\n1 1\n1 2\n2 2\n3 3\n3 4\n4 4\n1 4",
            "21\n12 12\n13 12\n12 11\n13 13\n10 10\n11 10\n11 11\n501 500\n501 501\n503 502\n500 500\n503 503\n502 501\n502 502\n700 700\n702 702\n703 702\n701 701\n702 701\n703 703\n701 700",
            "6\n1 11\n6 8\n11 10\n1 10\n11 11\n6 9",
            "4\n1 1\n2 2\n3 2\n3 1",
            "3\n1 2\n3 4\n3 2",
            "3\n1 1\n1 2\n2 2",
            "4\n5 5\n5 4\n6 3\n6 4",
            "3\n1 1\n2 2\n2 1"
        ],
        "outputs": [
            "1",
            "0",
            "21",
            "16",
            "10",
            "0",
            "7",
            "6",
            "5",
            "13",
            "11",
            "38",
            "2",
            "6",
            "16",
            "31",
            "29",
            "29",
            "13",
            "4",
            "4",
            "1",
            "3",
            "25",
            "34",
            "29",
            "4",
            "2",
            "34",
            "28",
            "22",
            "8",
            "22",
            "22",
            "6",
            "0",
            "0",
            "0",
            "0",
            "1",
            "1",
            "3",
            "7",
            "5",
            "0",
            "0",
            "0",
            "0",
            "1",
            "6",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "1",
            "0",
            "2",
            "1",
            "0",
            "0",
            "0",
            "0",
            "0"
        ]
    },
    "code": "n=int(input())\r\nx=[0]*(n+1);y=[0]*(n+1)\r\nvis=[0]*(n+1)\r\ndef dfs(v):\r\n    vis[v]=1\r\n    for i in range(1,n+1):\r\n        if vis[i]==0 and (x[i]==x[v] or y[i]==y[v]):\r\n            dfs(i)\r\nfor i in  range(1,n+1):\r\n    l,m=map(int,input().split())\r\n    x[i]=l;y[i]=m\r\nans=-1\r\nfor i in range(1,n+1):\r\n    if vis[i]==0:\r\n        dfs(i)\r\n        ans+=1\r\nprint(ans)",
    "rating": "1200"
}